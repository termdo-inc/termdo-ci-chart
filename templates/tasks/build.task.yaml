apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: build-task
spec:
  params:
    - name: env
      type: string
      description: Deployment environment (dev, test, prod)
    - name: artifact
      type: string
      description: Name of the artifact (image tarball)
    - name: repository
      type: string
      description: Image repository name
    - name: revision
      type: string
      description: Git revision to tag the image with
    - name: sha-length
      type: string
      description: Length of the git sha to use in the tag
  workspaces:
    - name: source
      description: Workspace containing the repository
      readOnly: true
    - name: cache
      description: Workspace for caching image layers
      readOnly: true
    - name: artifacts
      description: Workspace to store the built image tarball
  steps:
    - name: build
      image: moby/buildkit:latest
      securityContext:
        privileged: true
        appArmorProfile:
          type: Unconfined
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/sh
        set -e

        echo -e "[‚è≥]: Normalizing the repository name..."
        REPOSITORY="$(params.repository)"
        LOWER_PROJECT=$(echo -e "{{ .Values.project.name }}" | tr '[:upper:]' '[:lower:]')
        LOWER_REPOSITORY=$(echo -e "$REPOSITORY" | tr '[:upper:]' '[:lower:]')
        if [ "${LOWER_REPOSITORY#"$LOWER_PROJECT"}" != "$LOWER_REPOSITORY" ]; then
          PREFIX_LENGTH=${#LOWER_PROJECT}
          REPOSITORY="${REPOSITORY:$PREFIX_LENGTH}"
          REPOSITORY="${REPOSITORY#[-_]}"
        fi
        echo -e "[üü¢]: Repository name normalized to '$REPOSITORY'.\n"

        echo -e "[‚è≥]: Normalizing the version name..."
        REVISION="$(params.revision)"
        if echo -e "$REVISION" | grep -Eq '^[0-9a-f]{7,40}$'; then
          VERSION="${REVISION:0:$(params.sha-length)}"
        elif echo -e "$REVISION" | grep -Eq '^v[0-9]'; then
          VERSION="${REVISION#v}"
        else
          echo -e "[üî¥]: Invalid revision: '$REVISION'!\n"
          exit 1
        fi
        echo -e "[üü¢]: Version name normalized to '$VERSION'.\n"

        echo "[‚è≥]: Preparing build arguments..."
        if [ "$REPOSITORY" = "web" ]; then
          BUILD_ARGS="$BUILD_ARGS --opt build-arg:PUBLIC_APP_ENV=$(params.env)"
          BUILD_ARGS="$BUILD_ARGS --opt build-arg:PUBLIC_APP_VER=$VERSION"
        fi
        echo -e "[üü¢]: Build arguments prepared: $BUILD_ARGS\n"

        echo "[‚è≥]: Checking for BuildKit cache..."
        if [ ! -f "$(workspaces.cache.path)/index.json" ]; then
          echo -e "[üü†]: No cache found in '$(workspaces.cache.path)'.\n"
        else
          echo -e "[üü¢]: Cache found in '$(workspaces.cache.path)'.\n"
        fi

        echo -e "[‚è≥]: Building the image..."
        buildctl-daemonless.sh build \
          --frontend dockerfile.v0 \
          --local context="." \
          --local dockerfile="{{ .Values.project.dockerfile.path }}" \
          --opt filename={{ .Values.project.dockerfile.name }} \
          $BUILD_ARGS \
          --import-cache type=local,src=$(workspaces.cache.path) \
          --output type=oci,dest="$(workspaces.artifacts.path)/$(params.artifact)"
        echo -e "[üü¢]: Image built and saved to '$(workspaces.artifacts.path)/$(params.artifact)'.\n"
